{"version":3,"sources":["Types/index.ts","store/index.ts","components/FavoriteButton/index.tsx","components/AlbumCard/index.tsx","components/SearchInput/index.tsx","views/Home/index.tsx","services/index.ts","components/AudioPreviewCard/index.tsx","views/AlbumDetail/index.tsx","components/PageContainer/index.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["MediaType","GeneralStoreContext","createContext","theme","onlyFavorites","isLoading","albumsData","favoriteAlbums","searchValue","setTheme","setOnlyFavorites","onlyFavorite","setIsLoading","setAlbums","albums","setInitialFavorites","setFavoriteAlbums","album","favoritesFilter","filter","fav","id","label","currFav","length","forEach","index","splice","push","localStorage","setItem","JSON","stringify","setSearchValue","makeAutoObservable","this","FavoriteButton","observer","props","generalStore","useContext","favFilter","isFav","className","onClick","HeartFilled","HeartOutlined","AlbumCard","history","useHistory","alt","effect","src","attributes","SearchInput","useState","isFocused","setIsFocused","type","value","onFocus","onBlur","onChange","target","SearchOutlined","Home","albumsFilter","toLowerCase","includes","favAlbumsFilter","map","LoadingOutlined","Services","getAlbuns","a","axios","get","response","data","feed","message","getSearchResults","term","mediaType","post","results","AudioPreviewCard","trackName","previewUrl","controls","AlbumDetail","album_id","useParams","setAlbum","media","setMedia","useEffect","alb","title","music","then","mediaData","finally","style","backgroundImage","goBack","category","href","link","rel","artistId","PageContainer","children","Routes","localFavs","getItem","entry","favs","parse","path","component","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8812ad7c.chunk.js","sourcesContent":["export interface IFeed {\n  author: { name: { label: string }; uri: { label: string } };\n  entry: IAlbum[];\n  icon: { label: string };\n  id: { label: string };\n  link: { attributes: { rel: string; type: string; href: string } }[];\n  rights: { label: string };\n  title: { label: string };\n  updated: { label: Date };\n}\n\nexport interface IAlbum {\n  category: {\n    attributes: {\n      \"im:id\": string;\n      label: string;\n      scheme: string;\n      term: string;\n    };\n  };\n  id: { attributes: { \"im:id\": string }; label: string };\n  \"im:artist\": { label: string; attributes: { href: string } };\n  \"im:contentType\": {\n    \"im:contentType\": { attributes: { term: string; label: string } };\n    attributes: { term: string; label: string };\n  };\n  \"im:image\": { attributes: { height: number }; label: string }[];\n  \"im:itemCount\": { label: number };\n  \"im:name\": { label: string };\n  \"im:price\": {\n    label: string;\n    attributes: { amount: number; currency: string };\n  };\n  \"im:releaseDate\": { label: Date; attributes: { label: string } };\n  link: { attributes: { href: string; rel: string; type: string } };\n  rights: { label: string };\n  title: { label: string };\n}\n\nexport interface IMedia {\n  artistId: number;\n  artistName: string;\n  artistViewUrl: string;\n  artworkUrl60: string;\n  artworkUrl100: string;\n  collectionCensoredName: string;\n  collectionExplicitness: string;\n  collectionId: number;\n  collectionName: string;\n  collectionPrice: number;\n  collectionViewUrl: string;\n  country: string;\n  currency: string;\n  discCount: number;\n  discNumber: number;\n  isStreamable: boolean;\n  kind: string;\n  previewUrl: string;\n  primaryGenreName: string;\n  releaseDate: Date;\n  trackCensoredName: string;\n  trackCount: number;\n  trackExplicitness: string;\n  trackId: number;\n  trackName: string;\n  trackNumber: number;\n  trackPrice: number;\n  trackTimeMillis: number;\n  trackViewUrl: string;\n  wrapperType: string;\n}\n\nexport enum MediaType {\n  music = \"music\",\n  musicVideo = \"musicVideo\",\n  movie = \"movie\",\n  podcast = \"podcast\",\n  audiobook = \"audiobook\",\n  shortFilm = \"shortFilm\",\n  tvShow = \"tvShow\",\n  software = \"software\",\n  ebook = \"ebook\",\n  all = \"all\",\n}\n","import { makeAutoObservable } from \"mobx\";\nimport { createContext } from \"react\";\nimport { IAlbum } from \"../Types\";\n\nclass GeneralStore {\n  theme = \"light\";\n  onlyFavorites = false;\n  isLoading = true;\n  albumsData: IAlbum[] = [];\n  favoriteAlbums: IAlbum[] = [];\n  searchValue = ``;\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  setTheme = (theme: string) => {\n    this.theme = theme;\n  };\n\n  setOnlyFavorites = (onlyFavorite: boolean) => {\n    this.onlyFavorites = onlyFavorite;\n  };\n\n  setIsLoading = (isLoading: boolean) => {\n    this.isLoading = isLoading;\n  };\n\n  setAlbums = (albums: IAlbum[]) => {\n    this.albumsData = albums;\n  };\n\n  setInitialFavorites = (albums: IAlbum[]) => {\n    if (albums) {\n      this.favoriteAlbums = albums;\n    }\n  };\n\n  setFavoriteAlbums = (album?: IAlbum) => {\n    if (album) {\n      const favoritesFilter = this.favoriteAlbums.filter(\n        (fav) => fav.id.label === album.id.label\n      );\n      const currFav = this.favoriteAlbums;\n\n      if (favoritesFilter && favoritesFilter.length > 0) {\n        currFav.forEach((fav, index) => {\n          if (fav.id.label === favoritesFilter[0].id.label) {\n            currFav.splice(index, 1);\n          }\n        });\n      } else {\n        currFav.push(album);\n        this.favoriteAlbums = currFav;\n\n        localStorage.setItem(\n          \"@myfav:albums\",\n          JSON.stringify(this.favoriteAlbums)\n        );\n      }\n    }\n  };\n\n  setSearchValue = (searchValue: string) => {\n    this.searchValue = searchValue;\n  };\n}\n\nexport const GeneralStoreContext = createContext(new GeneralStore());\n","import React, { FC, useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { HeartFilled, HeartOutlined } from \"@ant-design/icons\";\nimport { GeneralStoreContext } from \"../../store\";\nimport { IAlbum } from \"../../Types\";\nimport \"./styles.scss\";\n\ninterface IProps {\n  album?: IAlbum;\n}\n\nconst FavoriteButton: FC<IProps> = observer((props) => {\n  const { album } = props;\n  const generalStore = useContext(GeneralStoreContext);\n\n  const { favoriteAlbums, setFavoriteAlbums } = generalStore;\n\n  const favFilter = favoriteAlbums.filter(\n    (fav) => fav.id.label === album?.id.label\n  );\n\n  const isFav = favFilter && favFilter.length > 0 ? true : false;\n\n  return (\n    <button\n      className=\"favorite-button\"\n      onClick={() => setFavoriteAlbums(album)}\n    >\n      {isFav ? (\n        <HeartFilled className=\"favorite-button__svg--active\" />\n      ) : (\n        <HeartOutlined className=\"favorite-button__svg\" />\n      )}\n    </button>\n  );\n});\n\nexport default FavoriteButton;\n","import React, { FC } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\nimport { IAlbum } from \"../../Types\";\n\nimport \"./styles.scss\";\nimport FavoriteButton from \"../FavoriteButton\";\n\ninterface IProps {\n  album: IAlbum;\n}\n\nconst AlbumCard: FC<IProps> = (props) => {\n  const { album } = props;\n  const history = useHistory();\n\n  return (\n    <div className=\"album-card\">\n      <figure className=\"album-card__image\">\n        <LazyLoadImage\n          alt={`${album[\"im:name\"].label} cover`}\n          effect=\"blur\"\n          src={album[\"im:image\"][2].label}\n        />\n      </figure>\n      <div className=\"album-card__info\">\n        <div className=\"info__favorite\">\n          <FavoriteButton album={album} />\n        </div>\n        <div className=\"info__name\">\n          <p>{album[\"im:name\"].label}</p>\n          <span>{album[\"im:artist\"].label}</span>\n        </div>\n        <div className=\"info__price\">\n          <button\n            onClick={() =>\n              history.push(`/album-detail/${album.id.attributes[\"im:id\"]}`)\n            }\n          >\n            Show details\n          </button>\n          <span>{album[\"im:price\"].label}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AlbumCard;\n","import React, { FC, useContext, useState } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { SearchOutlined } from \"@ant-design/icons\";\nimport { GeneralStoreContext } from \"../../store\";\n\nimport \"./styles.scss\";\n\nconst SearchInput: FC = observer(() => {\n  const generalStore = useContext(GeneralStoreContext);\n\n  const { searchValue, setSearchValue } = generalStore;\n\n  const [isFocused, setIsFocused] = useState(false);\n\n  return (\n    <div className={`search-input ${isFocused && \"search-input--focused\"}`}>\n      <span className=\"search-input__placeholder\">\n        Search by artist or album\n      </span>\n      <input\n        type=\"text\"\n        value={searchValue}\n        onFocus={() => setIsFocused(true)}\n        onBlur={() => !searchValue && setIsFocused(false)}\n        onChange={({ target: { value } }) => setSearchValue(value)}\n      />\n      <SearchOutlined />\n    </div>\n  );\n});\n\nexport default SearchInput;\n","import React, { FC, useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { HeartFilled, HeartOutlined, LoadingOutlined } from \"@ant-design/icons\";\nimport { GeneralStoreContext } from \"../../store\";\n\nimport AlbumCard from \"../../components/AlbumCard\";\n\nimport \"./styles.scss\";\nimport SearchInput from \"../../components/SearchInput\";\n\nconst Home: FC = observer(() => {\n  const generalStore = useContext(GeneralStoreContext);\n  const {\n    albumsData,\n    isLoading,\n    searchValue,\n    favoriteAlbums,\n    onlyFavorites,\n    setOnlyFavorites,\n  } = generalStore;\n\n  const albumsFilter = albumsData?.filter(\n    (album) =>\n      album[\"im:artist\"].label\n        .toLowerCase()\n        .includes(searchValue.toLowerCase()) ||\n      album[\"im:name\"].label.toLowerCase().includes(searchValue.toLowerCase())\n  );\n\n  const favAlbumsFilter = favoriteAlbums.filter(\n    (album) =>\n      album[\"im:artist\"].label\n        .toLowerCase()\n        .includes(searchValue.toLowerCase()) ||\n      album[\"im:name\"].label.toLowerCase().includes(searchValue.toLowerCase())\n  );\n\n  const renderAlbuns = () => {\n    if (isLoading) {\n      return <LoadingOutlined />;\n    } else if (albumsFilter && albumsFilter.length > 0) {\n      return albumsFilter.map((album) => {\n        return <AlbumCard key={album.id.label} album={album} />;\n      });\n    }\n    return <p>Ops! There is no such artist or album in this list</p>;\n  };\n\n  const renderFavorites = () => {\n    if (favAlbumsFilter && favAlbumsFilter.length > 0) {\n      return favAlbumsFilter.map((album) => {\n        return <AlbumCard key={album.id.label} album={album} />;\n      });\n    }\n    return (\n      <p>\n        Looks like you dont have favs yet. Try touching some <HeartOutlined />\n        `s\n      </p>\n    );\n  };\n\n  return (\n    <div className=\"home-view\">\n      <div className=\"home-view__title\">\n        <h1>The BEST of ITunes</h1>\n      </div>\n      <div className=\"home-view__search-input\">\n        <SearchInput />\n        <div className=\"show-only-favorites\">\n          <button onClick={() => setOnlyFavorites(!onlyFavorites)}>\n            {onlyFavorites ? \"Back to general list\" : \"Show Favorites\"}\n          </button>\n          {!onlyFavorites && <HeartFilled />}\n        </div>\n      </div>\n      <div className=\"home-view__albums-list\">\n        {onlyFavorites ? renderFavorites() : renderAlbuns()}\n      </div>\n    </div>\n  );\n});\n\nexport default Home;\n","import axios from \"axios\";\nimport { IFeed, IMedia, MediaType } from \"../Types\";\n\nexport default class Services {\n  static getAlbuns = async (): Promise<IFeed> => {\n    try {\n      const response = await axios.get(\n        \"https://itunes.apple.com/us/rss/topalbums/limit=100/json\"\n      );\n      const data = response.data.feed;\n\n      return data;\n    } catch (error) {\n      return error.message;\n    }\n  };\n\n  static getSearchResults = async (\n    term: string,\n    mediaType: MediaType\n  ): Promise<IMedia[]> => {\n    try {\n      const response = await axios.post(\n        `https://itunes.apple.com/search?term=${term}&media=${mediaType}`\n      );\n\n      const data = response.data.results;\n      return data;\n    } catch (error) {\n      return error.message;\n    }\n  };\n}\n","import { FC } from \"react\";\nimport \"./styles.scss\";\n\ninterface IProps {\n  trackName: string;\n  previewUrl: string;\n}\n\nconst AudioPreviewCard: FC<IProps> = (props) => {\n  const { trackName, previewUrl } = props;\n\n  return (\n    <div className=\"audio-card\">\n      <p>{trackName}</p>\n      <audio src={previewUrl} controls></audio>\n    </div>\n  );\n};\n\nexport default AudioPreviewCard;\n","import React, { FC, useContext, useEffect, useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { observer } from \"mobx-react\";\nimport { LazyLoadComponent } from \"react-lazy-load-image-component\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { FiChevronLeft } from \"react-icons/fi\";\nimport { GeneralStoreContext } from \"../../store\";\nimport { IAlbum, IMedia, MediaType } from \"../../Types\";\nimport FavoriteButton from \"../../components/FavoriteButton\";\n\nimport \"./styles.scss\";\nimport Services from \"../../services\";\nimport AudioPreviewCard from \"../../components/AudioPreviewCard\";\n\ninterface IUrlParams {\n  album_id: string;\n}\n\nconst AlbumDetail: FC = observer(() => {\n  const { album_id } = useParams<IUrlParams>();\n  const history = useHistory();\n  const generalStore = useContext(GeneralStoreContext);\n  const { albumsData, isLoading, setIsLoading } = generalStore;\n\n  const [album, setAlbum] = useState<IAlbum>();\n  const [media, setMedia] = useState<IMedia[]>();\n\n  useEffect(() => {\n    setIsLoading(true);\n    if (albumsData && albumsData.length > 0) {\n      const albumsFilter = albumsData.filter(\n        (alb) => alb.id.attributes[\"im:id\"] === album_id\n      );\n      setAlbum(albumsFilter[0]);\n\n      Services.getSearchResults(albumsFilter[0].title.label, MediaType.music)\n        .then((mediaData) => {\n          if (mediaData) {\n            setMedia(mediaData);\n          }\n        })\n        .finally(() => setIsLoading(false));\n    }\n  }, [album_id, albumsData, setIsLoading]);\n\n  const renderMusicCards = () => {\n    if (isLoading) {\n      return <LoadingOutlined />;\n    } else if (media && media.length > 0) {\n      return media?.map((mediaData) => {\n        return (\n          <AudioPreviewCard\n            key={mediaData.artistId}\n            previewUrl={mediaData.previewUrl}\n            trackName={mediaData.trackName}\n          />\n        );\n      });\n    } else {\n      return <p>Sorry, we couldn`t find anything related :( </p>;\n    }\n  };\n\n  return (\n    <div className=\"album-detail\">\n      {isLoading ? (\n        <LoadingOutlined />\n      ) : (\n        <>\n          <LazyLoadComponent>\n            <div\n              className=\"album-detail__cover\"\n              style={{\n                backgroundImage: `url(${album?.[\"im:image\"][2].label})`,\n              }}\n            >\n              <button\n                className=\"cover__back-btn\"\n                onClick={() => history.goBack()}\n              >\n                <FiChevronLeft />\n              </button>\n            </div>\n          </LazyLoadComponent>\n          <div className=\"album-detail__title\">\n            <h1>{album?.[\"im:name\"].label}</h1>\n            <FavoriteButton album={album} />\n          </div>\n          <div className=\"album-detail__info\">\n            <ul>\n              <li>\n                <span>Artist: </span>\n                {album?.[\"im:artist\"].label}\n              </li>\n              <li>\n                <span>Category: </span>\n                {album?.category.attributes.label}\n              </li>\n              <li>\n                <span>Price: </span>\n                {album?.[\"im:price\"].label}\n              </li>\n              <li>\n                <span>Release Date: </span>\n                {album?.[\"im:releaseDate\"].attributes.label}\n              </li>\n              <li>\n                <span>ITunes page: </span>\n                <a\n                  href={album?.link.attributes.href}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  Click Here\n                </a>\n              </li>\n            </ul>\n          </div>\n          <div className=\"album-detail__media\">\n            <p>\n              More of <span>{album?.title.label}</span> on ITunes\n            </p>\n            <div className=\"media__list\">{renderMusicCards()}</div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n});\n\nexport default AlbumDetail;\n","import { observer } from \"mobx-react\";\nimport { FC, useContext } from \"react\";\nimport { GeneralStoreContext } from \"../../store\";\nimport \"./styles.scss\";\n\ninterface IProps {\n  children: React.ReactNode;\n}\n\nconst PageContainer: FC<IProps> = observer((props) => {\n  const { children } = props;\n  const generalStore = useContext(GeneralStoreContext);\n\n  return (\n    <div className={`page-container page-container--${generalStore.theme}`}>\n      {children}\n    </div>\n  );\n});\n\nexport default PageContainer;\n","import { useContext, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { observer } from \"mobx-react\";\nimport { GeneralStoreContext } from \"../store\";\n\nimport Home from \"../views/Home\";\nimport AlbumDetail from \"../views/AlbumDetail\";\nimport PageContainer from \"../components/PageContainer\";\nimport Services from \"../services\";\nimport { IAlbum } from \"../Types\";\n\nconst Routes = observer(() => {\n  const generalStore = useContext(GeneralStoreContext);\n  const { albumsData, setAlbums, setIsLoading, setInitialFavorites } =\n    generalStore;\n\n  const localFavs = localStorage.getItem(\"@myfav:albums\");\n\n  useEffect(() => {\n    if (!albumsData || albumsData.length < 1) {\n      Services.getAlbuns()\n        .then((feed) => {\n          if (feed) {\n            setAlbums(feed.entry);\n          }\n        })\n        .finally(() => setIsLoading(false));\n    }\n\n    if (localFavs) {\n      const favs: IAlbum[] = JSON.parse(localFavs);\n      if (favs.length > 0) {\n        setInitialFavorites(favs);\n      }\n    }\n  }, [albumsData, setAlbums, setIsLoading, setInitialFavorites, localFavs]);\n\n  return (\n    <Router>\n      <PageContainer>\n        <Switch>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/album-detail/:album_id\" exact component={AlbumDetail} />\n        </Switch>\n      </PageContainer>\n    </Router>\n  );\n});\n\nexport default Routes;\n","import React from \"react\";\nimport Routes from \"./routes\";\n\nfunction App() {\n  return <Routes />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./sass/index.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}